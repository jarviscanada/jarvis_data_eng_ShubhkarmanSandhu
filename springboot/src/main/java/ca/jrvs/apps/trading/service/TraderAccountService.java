package ca.jrvs.apps.trading.service;

import ca.jrvs.apps.trading.dao.AccountDao;
import ca.jrvs.apps.trading.dao.PositionDao;
import ca.jrvs.apps.trading.dao.SecurityOrderDao;
import ca.jrvs.apps.trading.dao.TraderDao;
import ca.jrvs.apps.trading.model.domain.Account;
import ca.jrvs.apps.trading.model.domain.Trader;
import ca.jrvs.apps.trading.model.domain.TraderAccountView;
import java.lang.reflect.Field;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

@Service
public class TraderAccountService {

    private static final Logger logger = LoggerFactory.getLogger(TraderAccountService.class);
    private TraderDao traderDao;
    private AccountDao accountDao;
    private PositionDao positionDao;
    private SecurityOrderDao securityOrderDao;

    @Autowired
    public TraderAccountService(TraderDao traderDao, AccountDao accountDao, PositionDao positionDao,
                                SecurityOrderDao securityOrderDao) {
        this.traderDao = traderDao;
        this.accountDao = accountDao;
        this.positionDao = positionDao;
        this.securityOrderDao = securityOrderDao;
    }

    /**
     * Create a new trader and initialize a new account with 0 amount.
     * - Validate user input (all fields must be non empty)
     * - Create a trader
     * - Create an account
     * - create, setup, and return new TraderAccountView
     *
     * Assumtion: to simplify the logic, each trader has only one account where traderId == accountId
     *
     * @param trader cannot be null. All fields cannot be null except for id (auto-generated by id)
     * @return traderAccountView
     * @throws java.lang.IllegalArgumentException if a trader has null fields or id is not null
     * */
    public TraderAccountView createTraderAndAccount(Trader trader) {
        Account account = new Account();
        if (validate(trader)) {
            traderDao.save(trader);
            account.setAmount(0d);
            account.setTrader_id(trader.getID());
            accountDao.save(account);
        } else {
            throw new IllegalArgumentException("Error: trader account could not be validated");
        }

        return makeTraderAccountView(trader, account);
    }


    /**
     * A trader can be deleted if it has no open position and 0 cash balance
     * - validate traderId
     * - get trader account by traderId and check account balance
     * - get position by accountId and check positions
     * - delete all securityOrder, account, trader(in this order)
     *
     * @param traderId must not be null
     * @throws IllegalArgumentException if tradeId is null or not found or unable to delete
     * */
    public void deleteTraderById(Integer traderId) {
        if (!validate(traderId)) {
            throw new IllegalArgumentException("traderId is null or doesn't exist in the table.");
        }

        Account account = accountDao.findById(traderId).get();
        if (account.getAmount() != 0d || positionDao.existById(account.getID())) {
            throw new IllegalArgumentException(
                    "A trader can be deleted if it has no open position and 0 cash balance");
        }

        if (securityOrderDao.existsById(account.getID())) {
            securityOrderDao.deleteById(account.getID());
        }

        accountDao.deleteById(account.getID());
        traderDao.deleteById(account.getID());
    }


    /**
     * Deposit a fund to an account by traderId
     * - validate user input
     * - account = accountDao.findByTraderId
     * - accountDao.updateAmountById
     *
     * @param traderId must not be null
     * @param fund must > 0
     * @return updated Account
     * @throws IllegalArgumentException if traded is null or not found, and fund <= 0
     * */
    public Account deposit(Integer traderId, Double fund) {
        if (!validate(traderId, fund)) {
            throw new IllegalArgumentException("traded is null or not found, and fund <= 0");
        }
        Account account = accountDao.findById(traderId).get();
        Double newAmount = account.getAmount() + fund;
        account.setAmount(newAmount);
        accountDao.updateOne(account);
        return account;
    }

    /**
     * Withdraw a fund to an account by traderId
     * - validate user input
     * - account = accountDao.findByTraderId
     * - accountDao.updateAmountId
     *
     * @param traderId traderId
     * @param fund amount can't be 0
     * @return updated Account
     * @throws IllegalArgumentException if traderId is null or not fund, fund <= 0 and insufficient fund
     * */
    public Account withdraw(Integer traderId, Double fund) {
        if (!validate(traderId, fund)) {
            throw new IllegalArgumentException("TraderId is null or doesn't exist or funds less than 0.");
        }

        if (accountDao.findById(traderId).get().getAmount() < fund) {
            throw new IllegalArgumentException("Not enough funds to withdraw.");
        }

        Account account = accountDao.findById(traderId).get();
        Double newAmount = account.getAmount() - fund;
        account.setAmount(newAmount);
        accountDao.updateOne(account);
        return account;
    }

    private TraderAccountView makeTraderAccountView(Trader trader, Account account) {
        return new TraderAccountView(trader.getID(), trader.getFirst_name(), trader.getLast_name(),
                trader.getDob(), trader.getCountry(), trader.getEmail(),
                account.getID(), account.getAmount());
    }

    private boolean validate(Trader trader) {
        try {
            Class clazz = Trader.class;
            for (Field field : clazz.getDeclaredFields()) {
                field.setAccessible(true);
                if (field.get(trader) == null || field.get(trader).equals("")) {
                    if (trader.getID() != null) {
                        return false;
                    }
                }
            }
        } catch (IllegalAccessException e) {
            logger.error("Access to trader class fields not possible", e);
        }
        return true;
    }

    private boolean validate(Integer traderId) {
        return traderId != null && traderDao.existsById(traderId);
    }

    private boolean validate(Integer traderId, Double fund) {
        return traderId != null && fund > 0 && traderDao.existsById(traderId);
    }
}